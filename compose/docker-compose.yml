services:
  postgres:
    image: postgres:15-alpine
    container_name: legal-saas-postgres
    environment:
      POSTGRES_DB: legal_saas_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - legal-saas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ../
      dockerfile: api/src/legal-saas-api/Dockerfile
    container_name: legal-saas-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - legal-saas-network
    restart: unless-stopped

  webapp:
    build:
      context: ../
      dockerfile: web/Dockerfile
    container_name: legal-saas-webapp
    environment:
      - NODE_ENV=production
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - legal-saas-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  legal-saas-network:
    driver: bridge
